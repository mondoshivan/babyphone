#!/usr/bin/env node

const path = require('path');

// environment
process.env['PROJECT_ROOT'] = path.join(__dirname, '..');

const config = require('../lib/config');

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('babyphone:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Create HTTP server.
 */

let server;
let port;
if (process.env['LOCAL_EXECUTION'] === 'true') {
    port = normalizePort(config.get('service.port'));
    app.set('port', port);
    server = http.createServer(app);
    server.listen(port);
} else {
    port = 443;
    app.set('port', port);
    const credentials = {
        key: fs.readFileSync('ssl/privkey.pem'),
        cert: fs.readFileSync('ssl/fullchain.pem')
    };
    server = https.createServer(credentials, app);
    server.listen(443);

    http.createServer(function (req, res) {
        res.writeHead(301, { "Location": "https://lyra.et-inf.fho-emden.de:15089" + req.url });
        res.end();
    }).listen(80);
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
